SOTD: The General - Dispatch

Aim: How do we flag down a resource?

Semaphores (created by Edgar Dijkstra)

	IPC construct used to control access to a shared resource (like a file or shared memory).
	
	Essentially, a semaphore is a counter that represents how many processes can access a resource at any given time.
	
		If a semaphore has a value of 3, then it can have 3 active "users".
		
		If a semaphore has a value of 0, then it is unavailable.
		
	Most semaphore operations are "atomic", meaning they will not be split up into multiple processor instructions.
	
	Semaphore operations:
	
		Create a semaphore
		
		Set an initial value
		
		Up(S) / V(S)
			Release the semaphore to signal you are done with it's associated resource.
			
			pseudocode:
				S++
				
		Down(S) / P(S)
			Attempt to take the semaphore.
			
			If the semaphore is 0, wait for it to be available
			
			pseudocode:
				while( S == 0 )
					block
				S--
				
	Semaphore code
		semget - <sys/types.h> <sys/ipc.h> <sys/sem.h>
		
			Create/Get access to a semaphore.
			
			This is not the same as Up(S), the semaphore is not modified by semget.
			
			Returns a semaphore descriptor or -1 (errno)
			
			semget( <KEY>, <AMOUNT>, <FLAGS> )
			
				KEY
					Unique semaphore identifier (use ftok)
					
				AMOUNT
					Semaphores are actually stored as sets with possibly many semaphores stored together. This parameter sets the number of semaphores to create/get.
					
				FLAGS
					Includes permissions for the semaphore.
					
					Combine with bitwise or
					
					IPC_CREAT: create the semaphore will set value to 0.
								
					IPC_EXCL: Fail if the semaphore already exists and IPC_CREAT is on.
					
				example
					int semd;
					semd = semget( ftok("file/dir"), 1, 0644 | IPC_CREAT );
					
				semctl - <sys/types.h> <sys/ipc.h> <sys/sem.h>
				
					Control the semaphore, including:
					
						Set the semaphore value
						Remove the semaphore				
						Get the current value
						Get information about the semaphore
						
notes for 12/8/15 start here
SOTD: Time is Running Out - Muse

Aim: What's a semaphore? - To control resources!
					
					semctl(<DESCRIPTOR>, <INDEX>, <OPERATION>, <DATA>)
					
						DESCRIPTOR
							The return value of semget
							
						INDEX
							The index of the semaphore you want to control in the semaphore set identified by the descriptor.
							
							For a single semaphore, set 0.
							
						OPERATION
							One of the following constants
								(there are others as well)
							IPC_RMID: remove the semaphore
							
							SETVAL: Set the value
								(requires DATA)
								
							GETVAL: Return the value
							
							IPC_STAT: Populate buffer with information about the semaphore.
							(Requires DATA)
							
						DATA
							Variable for setting/storing information about the semaphore (data type: union semun)
							
							You have to declare this union in your main c file on linux machines.
							
							union senum {
							
								int val;
								struct semid_ds *buff;
								unsigned short *array;
								struct seminfo *_buf;
							}
								val: used to set initial
								buf: buffer for IPC_STAT
								
						examples
						
							Setting the semaphore:
								union senum su;
								su.val = 3;
								semctl( semd, 0, SETVAL, su );
								
							Getting the value:
								int sval;
								sval = semctl( semd, 0, GETVAL );
								
							Removing the semaphore:
								semctl( semd, 0, IPC_RMID );
